import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import UIkit from 'uikit';
import 'uikit/dist/css/uikit.min.css';
import Icons from 'uikit/dist/js/uikit-icons';
import '../styles/admin.css';

UIkit.use(Icons);

const AdminLogin = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [isDark, setIsDark] = useState(false);
  const navigate = useNavigate();

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const ADMIN_USERNAME = 'admin';
  const ADMIN_PASSWORD = 'admin123';
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã
    const darkMode = localStorage.getItem('adminDarkMode') === 'true' || 
                   window.matchMedia('(prefers-color-scheme: dark)').matches;
    setIsDark(darkMode);
    applyTheme(darkMode);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π—Ç–∞
    const header = document.querySelector('header');
    const footer = document.querySelector('footer');
    if (header) header.style.display = 'none';
    if (footer) footer.style.display = 'none';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isAuthenticated = localStorage.getItem('isAdminAuthenticated') === 'true' || 
                          localStorage.getItem('adminAuth') === 'true';
    
    if (isAuthenticated) {
      navigate('/admin/dashboard');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ logout
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('logout')) {
      UIkit.notification({
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        status: 'success',
        pos: 'top-center',
        timeout: 2000
      });
      
      // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ logout
      window.history.replaceState({}, document.title, '/admin');
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (header) header.style.display = '';
      if (footer) footer.style.display = '';
    };
  }, [navigate]);
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
  const applyTheme = (dark) => {
    if (dark) {
      document.documentElement.classList.add('admin-dark-mode');
      document.body.classList.add('admin-dark-mode');
    } else {
      document.documentElement.classList.remove('admin-dark-mode');
      document.body.classList.remove('admin-dark-mode');
    }
  };
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    const newDarkMode = !isDark;
    setIsDark(newDarkMode);
    applyTheme(newDarkMode);
    localStorage.setItem('adminDarkMode', newDarkMode ? 'true' : 'false');
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
  const handleSubmit = (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(() => {
      if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
        // –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        localStorage.setItem('isAdminAuthenticated', 'true');
        localStorage.setItem('adminAuth', 'true');
        
        UIkit.notification({
          message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!',
          status: 'success',
          pos: 'top-center',
          timeout: 2000
        });
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        navigate('/admin/dashboard');
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        setLoading(false);
      }
    }, 800);
  };

  return (
    <div className={`admin-login ${isDark ? 'dark-mode' : 'light-mode'}`}>
      <div className="theme-toggle-container">
        <button onClick={toggleTheme} className="theme-toggle-login">
          {isDark ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞'}
        </button>
      </div>
      
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <div className="logo">
              <span uk-icon="icon: album; ratio: 2"></span>
            </div>
            <h1>–ú—É–∑–µ–π –û–Ω–ª–∞–π–Ω</h1>
            <p>–í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
          </div>
          
          {error && (
            <div className="uk-alert uk-alert-danger">
              <span uk-icon="icon: warning; ratio: 0.8"></span> {error}
            </div>
          )}
          
          <form onSubmit={handleSubmit} className="login-form">
            <div className="uk-margin">
              <div className="uk-inline uk-width-1-1">
                <span className="uk-form-icon" uk-icon="icon: user"></span>
                <input
                  className="uk-input"
                  type="text"
                  placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                />
              </div>
            </div>
            
            <div className="uk-margin">
              <div className="uk-inline uk-width-1-1">
                <span className="uk-form-icon" uk-icon="icon: lock"></span>
                <input
                  className="uk-input"
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
            </div>
            
            <button 
              type="submit" 
              className="uk-button uk-button-primary uk-width-1-1"
              disabled={loading}
            >
              {loading ? (
                <div uk-spinner="ratio: 0.6"></div>
              ) : (
                <>–í–æ–π—Ç–∏ <span uk-icon="sign-in"></span></>
              )}
            </button>
          </form>
          
          <div className="login-hint">
            <p>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞: admin / admin123</p>
          </div>
        </div>
      </div>
      
      <div className="login-footer">
        <p>&copy; 2023 –ú—É–∑–µ–π –û–Ω–ª–∞–π–Ω | –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
      </div>
    </div>
  );
};

export default AdminLogin; 
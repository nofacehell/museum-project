import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from './config/sequelize.js';
import { seedDatabase } from './models/index.js';
import { router } from './routes/exhibits.js';
import quizRoutes from './routes/quizzes.js';
import gameRoutes from './routes/games.js';
import reviewRoutes from './routes/reviews.js';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º __dirname –∏ __filename –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
app.use(cors({
  origin: ['http://localhost:5173', 'http://127.0.0.1:5173'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// Path for local storage in case DB is unavailable
const DATA_DIR = path.join(__dirname, 'data');

// Ensure data directory exists
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// Local storage functions
const localDB = {
  getAll: (collection) => {
    const filePath = path.join(DATA_DIR, `${collection}.json`);
    if (fs.existsSync(filePath)) {
      return JSON.parse(fs.readFileSync(filePath, 'utf8'));
    }
    return [];
  },
  save: (collection, data) => {
    const filePath = path.join(DATA_DIR, `${collection}.json`);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  }
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB().then(() => {
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  seedDatabase().then(() => {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  });
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
});

// Add local DB to request
app.use((req, res, next) => {
  req.dbConnected = true;
  req.localDB = localDB;
  next();
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
app.get('/', (req, res) => {
  res.json({ 
    message: 'API –º—É–∑–µ—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    database: 'SQLite',
    database_status: 'connected',
    status: 'online',
    timestamp: new Date().toISOString(),
    version: '2.0.0',
    endpoints: [
      '/api/exhibits',
      '/api/games',
      '/api/quizzes',
      '/api/reviews'
    ]
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/exhibits', router);
app.use('/api/games', gameRoutes);
app.use('/api/quizzes', quizRoutes);
app.use('/api/reviews', reviewRoutes);

// Serve static files from the uploads directory
app.use('/uploads', express.static(path.join(__dirname, '../../uploads')));

// Serve static files if in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../../dist')));
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../../dist/index.html'));
  });
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –º—É–∑–µ—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(` API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
  console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞`);
  console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
    - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã: GET http://localhost:${PORT}/api/exhibits
    - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã: GET http://localhost:${PORT}/api/games
    - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: GET http://localhost:${PORT}/api/quizzes
    - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã: GET http://localhost:${PORT}/api/reviews
  `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (err) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
  
  if (process.env.NODE_ENV === 'production') {
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

export default app; 
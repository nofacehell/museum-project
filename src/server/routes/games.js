import express from 'express';
import { v2 as cloudinary } from 'cloudinary';
import { Game } from '../models/index.js';
import { Op } from 'sequelize';

const router = express.Router();

// –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–≥—Ä (–∑–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ë–î)
const defaultGames = [
  {
    _id: "1",
    title: "–ù–∞–π–¥–∏ –ø–∞—Ä—É",
    description: "–ò–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ç—Ä–µ–Ω–∏—Ä—É—è —Å–≤–æ—é –ø–∞–º—è—Ç—å –∏ –∑–Ω–∞–∫–æ–º—è—Å—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏.",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Elektronika_MK_52.jpg/800px-Elektronika_MK_52.jpg",
    gameType: "memory",
    difficulty: "–õ–µ–≥–∫–∏–π",
    estimatedTime: "5-10 –º–∏–Ω",
    category: "–ò–≥—Ä—ã –Ω–∞ –ø–∞–º—è—Ç—å",
    featured: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    _id: "2",
    title: "–û—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –ø–æ–¥–¥–µ–ª–∫–∞?",
    description: "–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏? –í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Raspberry_Pi_4_Model_B_-_Top.jpg/800px-Raspberry_Pi_4_Model_B_-_Top.jpg",
    gameType: "artist",
    difficulty: "–°—Ä–µ–¥–Ω–∏–π",
    estimatedTime: "5-10 –º–∏–Ω",
    category: "–í–∏–∫—Ç–æ—Ä–∏–Ω—ã",
    featured: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    _id: "3",
    title: "–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
    description: "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/First-hp35.jpg/800px-First-hp35.jpg",
    gameType: "timeline",
    difficulty: "–°–ª–æ–∂–Ω—ã–π",
    estimatedTime: "5-10 –º–∏–Ω",
    category: "–í–∏–∫—Ç–æ—Ä–∏–Ω—ã", 
    featured: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    _id: "4",
    title: "–£–≥–∞–¥–∞–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    description: "–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –µ–≥–æ –≤–Ω–µ—à–Ω–µ–º—É –≤–∏–¥—É? –í —ç—Ç–æ–π –∏–≥—Ä–µ –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Atari_2600_Wood_4Sw_Set.jpg/800px-Atari_2600_Wood_4Sw_Set.jpg",
    gameType: "style",
    difficulty: "–°—Ä–µ–¥–Ω–∏–π",
    estimatedTime: "5-10 –º–∏–Ω",
    category: "–í–∏–∫—Ç–æ—Ä–∏–Ω—ã",
    featured: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  }
];

// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
let useDefaultData = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
export const setUseDefaultData = (value) => {
  useDefaultData = value;
  console.log(`üîÑ API –∏–≥—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ${useDefaultData ? '—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ' : '–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'}`);
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {
  cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET
  });
}

// GET –≤—Å–µ—Ö –∏–≥—Ä
router.get('/', async (req, res) => {
  try {
    const games = await Game.findAll();
    res.json(games);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä' });
  }
});

// GET –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
router.get('/featured', async (req, res) => {
  try {
    const games = await Game.findAll({
      where: { featured: true }
    });
    res.json(games);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä' });
  }
});

// GET –∏–≥—Ä—ã –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const game = await Game.findByPk(req.params.id);
    
    if (!game) {
      return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json(game);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä—ã —Å ID ${req.params.id}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä—ã' });
  }
});

// POST —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
router.post('/', async (req, res) => {
  try {
    const newGame = await Game.create(req.body);
    res.status(201).json(newGame);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
    res.status(400).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã',
      details: error.message 
    });
  }
});

// PUT –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
router.put('/:id', async (req, res) => {
  try {
    const [updated] = await Game.update(req.body, {
      where: { id: req.params.id }
    });
    
    if (updated === 0) {
      return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞' });
    }
    
    const updatedGame = await Game.findByPk(req.params.id);
    res.json(updatedGame);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã —Å ID ${req.params.id}:`, error);
    res.status(400).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã',
      details: error.message 
    });
  }
});

// DELETE —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Game.destroy({
      where: { id: req.params.id }
    });
    
    if (deleted === 0) {
      return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json({ message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã —Å ID ${req.params.id}:`, error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã' });
  }
});

export default router; 